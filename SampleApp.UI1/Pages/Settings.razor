@page "/settings"
@layout MainLayout

@using Microsoft.AspNetCore.Authorization
@using Blazored.LocalStorage
@using SampleApp.UI1.Utility

@inject AuthenticationStateProvider AuthStateProvider
@inject IStringLocalizer<Localization.Locals> Localizer

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h5">Settings</MudText>

<MudGrid>
    <MudItem xs="12" md="8">
        <MudStack>
            <MudPaper Class="pa-3">
                @* <MudToggleIconButton Toggled="IsDarkMode" ToggledChanged="ToggleDarkMode"
                                     Icon="@Icons.Material.Filled.LightMode" Size="Size.Medium"
                                     Color="@Color.Warning"
                                     ToggledIcon="@Icons.Material.Filled.DarkMode"
                                     ToggledColor="@Color.Success"
                                     title="Toggle light/dark mode" /> *@
                <MudIconButton Icon="@(isDarkMode? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" OnClick="@(() => ToggleDarkMode())" />
            </MudPaper>
            <MudPaper Class="pa-3">
                <SampleApp.UI1.Components.LanguageSelector />
            </MudPaper>
            <MudPaper Class="pa-3">Item 3</MudPaper>
        </MudStack>
    </MudItem>

</MudGrid>

<AuthorizeView>
    <Authorized>
    </Authorized>
</AuthorizeView>

@code {

    [Inject]
    private AppStateService appState { get; set; } = null!;

    private bool isDarkMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isDarkMode = await appState.GetSetting<bool>("IsDarkMode", true);
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        await appState.SetSetting("IsDarkMode", isDarkMode);
    }
}
