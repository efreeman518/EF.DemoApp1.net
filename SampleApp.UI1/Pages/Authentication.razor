@page "/authentication/{action}"
@layout EmptyLayout

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SampleApp.UI1.Utility

@inject NavigationManager Navigation
@inject AppStateService AppStateService

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="OnLoginSucceeded">
    <LogInFailed>
        @* This content will be displayed if RemoteAuthenticatorView itself handles a login action
           and it fails directly, before navigating to /authentication/login-failed.
           For direct navigation to /authentication/login-failed, the LoginFailedHandler
           will rely on query parameters. *@
        <SampleApp.UI1.Components.LoginFailedHandler />
    </LogInFailed>
</RemoteAuthenticatorView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/?view=aspnetcore-9.0
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/standalone-with-azure-active-directory-b2c?view=aspnetcore-9.0#authentication-component
    [Parameter] public string? Action { get; set; }

    private async Task OnLoginSucceeded()
    {
        var state = await AuthenticationState;
        var user = state.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var username = user.FindFirst("name")?.Value ?? user.FindFirst("username")?.Value
                        ?? user.FindFirst("email")?.Value; // Use email if preferred_username is not available
            //await appStateService.SetSetting("username", username);
            await AppStateService.SetSetting("username", username);

            //EntraID - ideally the login_hint is appended later to the entra logout url in order to skip the logout user selection popup
            foreach (var claim in user.Claims)
            {
                if (claim.Type == "login_hint")
                {
                    //await LocalStorage.SetItemAsStringAsync("login_hint", claim.Value);
                    await AppStateService.SetSetting("login_hint", claim.Value);
                }
            }
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     switch (Action)
    //     {
    //         case "login-callback":
    //             break;
    //         case "logout-callback":
    //             break;
    //         case "login":
    //             break;
    //         case "logout":
    //             break;
    //         case "profile":
    //             break;
    //         default:
    //             break;
    //     }

    //     await Task.CompletedTask;
    // }
}
