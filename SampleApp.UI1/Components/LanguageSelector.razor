@using System.Globalization
@using SampleApp.UI1.Utility
@using Blazored.LocalStorage;

@inject NavigationManager Navigation
@inject IStringLocalizer<Localization.Locals> Localizer

<p>
    <label>
        @Localizer["Language"]:

        <select @bind="SelectedCultureName">
            @foreach (var culture in supportedCultures)
            {
                <option value="@culture.Name">@culture.NativeName</option>
            }
        </select>
    </label>
</p>

@code {
    [Inject]
    private AppStateService AppState { get; set; } = null!;
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private readonly CultureInfo[] supportedCultures = new[]
    {
        new CultureInfo("en-US"),
        new CultureInfo("zh-CN"),
        new CultureInfo("hi-IN"),
        new CultureInfo("es-ES"),
        new CultureInfo("fr-FR"),
        new CultureInfo("ar-SA"),
        new CultureInfo("bn-BD"),
        new CultureInfo("pt-PT"),
        new CultureInfo("ru-RU"),
        new CultureInfo("ur-PK")
    };

    private string selectedCultureName = CultureInfo.CurrentCulture.Name; //set at startup

    private string SelectedCultureName
    {
        get => selectedCultureName; 
        set
        {
            selectedCultureName = value;
            _ = ApplySelectedCultureAsync();
        }
    }

    //break point does not break here
    private async Task ApplySelectedCultureAsync()
    {
        Console.WriteLine($"Apply culture logic here for: {selectedCultureName}");
        if (CultureInfo.CurrentCulture.Name != selectedCultureName)
        {
            await AppState.SetSetting("SampleAppCultureName", selectedCultureName!);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // full reload for language change
        }
    }
}
