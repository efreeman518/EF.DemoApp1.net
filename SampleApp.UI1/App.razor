@using SampleApp.UI1.Components
@using SampleApp.UI1.Utility
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Localization.Locals> Localizer
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData">
                @*  DefaultLayout="@typeof(EmptyLayout)" *@
                <Authorizing>
                    <div class="mud-width-full mud-height-full d-flex justify-center align-center" style="height: 100vh;">
                        <div>
                            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        </div>
                        <div>
                            <MudText Typo="Typo.h6" Class="mt-4">Authorizing...</MudText>
                        </div>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @* Entire app requires authentication *@
                    <RedirectToLogin />

                    @* Some pages are anonymous, others @attribute [Authorize] *@
                    @* @if (!(context.User?.Identity?.IsAuthenticated ?? false))
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <MudText Color="Color.Error" Typo="Typo.h6">@Localizer["NotAuthorized"]</MudText>
                    } *@
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>@Localizer["NotFound"]</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">@Localizer["NotFound"]</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override void OnInitialized()
    {
        // Handle disconnect/reconnect for WebAssembly
        // Note: This is more relevant for Blazor Server, but good practice
        JSRuntime.InvokeVoidAsync("window.addEventListener", "unload", DotNetObjectReference.Create(this));
    }

    // Handle clean disconnection
    [JSInvokable]
    public void OnUnload()
    {
        // Clean up resources if needed
    }
}
