--enable managed identity sql login
CREATE USER [EntraGroupName/managed-identity-name] FROM EXTERNAL PROVIDER;
ALTER ROLE db_datareader ADD MEMBER [EntraGroupName/managed-identity-name];
ALTER ROLE db_datawriter ADD MEMBER EntraGroupName/[managed-identity-name];
--ALTER ROLE db_ddladmin ADD MEMBER [EntraGroupName/managed-identity-name];
grant VIEW ANY COLUMN MASTER KEY DEFINITION to [EntraGroupName/managed-identity-name]
grant VIEW ANY COLUMN ENCRYPTION KEY DEFINITION to [EntraGroupName/managed-identity-name]


USE [targetDB]; 
ALTER USER [targetDBUser] WITH login = [server-login];

--run in the master db - create the server login
USE [master]
CREATE LOGIN [appname-user/admin-env] WITH password=''

--run in the target db - create the db user from the server login
USE [db]
CREATE USER [appname-user/admin-env] FROM LOGIN [appname-user/admin-env]

--OR create contained user (in specific DB only, more portable)
CREATE USER [appname-user/admin-env] WITH PASSWORD = ''

--run in target db - create a role with appropriate permissions
CREATE ROLE [role-appname-user/admin-env]
GO
--assign permissions to the service account role
ALTER ROLE [db_datareader] ADD MEMBER  [role-appname-user/admin-env];
ALTER ROLE [db_datawriter] ADD MEMBER  [role-appname-user/admin-env];

--create a role with execute permissions (for existing and future stored procs)
CREATE ROLE [db_execute] AUTHORIZATION [dbo]
GO
GRANT EXECUTE TO [db_execute]
GO

ALTER ROLE [db_execute] ADD MEMBER  [role-appname-user/admin-env];

--add the user to the role
ALTER ROLE [role-appname-user/admin-env] ADD MEMBER [appname-user/admin-env];

--verify appropriate access
select m.name as Member, r.name as Role
from sys.database_role_members
inner join sys.database_principals m on sys.database_role_members.member_principal_id = m.principal_id
inner join sys.database_principals r on sys.database_role_members.role_principal_id = r.principal_id