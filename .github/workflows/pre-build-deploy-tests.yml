name: Pre-build-deploy-tests

on:
  push:
    branches:
      - main

  workflow_dispatch:
    # inputs:
    #   environment:
    #     type: choice
    #     description: Select environment
    #     required: true
    #     options:
    #       - dev
    #       - prod

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '9.x'
  SOLUTION_FILE: 'EF.SampleApp1.net.sln'
  TEST_RESULTS_DIR: './TestResults'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-run-id: ${{ steps.upload-artifact.outputs.run-id }}
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}  # Default to dev if not specified

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution (excluding test projects)
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore /p:IsTestProject=false

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run tests with coverage
        id: run-tests
        run: |
          # Clean previous results
          rm -rf ${{ env.TEST_RESULTS_DIR }}
          mkdir -p ${{ env.TEST_RESULTS_DIR }}

          # Verify coverlet.runsettings exists
          if [ ! -f "coverlet.runsettings" ]; then
            echo "##[warning] coverlet.runsettings not found, using defaults"
            echo '<?xml version="1.0" encoding="utf-8"?>
            <RunSettings>
              <DataCollectionRunSettings>
                <DataCollectors>
                  <DataCollector friendlyName="XPlat code coverage">
                    <Configuration>
                      <Format>cobertura</Format>
                      <Exclude>[Test.*]*,[*.Tests]*</Exclude>
                    </Configuration>
                  </DataCollector>
                </DataCollectors>
              </DataCollectionRunSettings>
            </RunSettings>' > coverlet.runsettings
          fi

          # Run tests through solution file with coverage
          dotnet test ${{ env.SOLUTION_FILE }} \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --settings:coverlet.runsettings \
            --logger "trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/test-results.trx" \
            --results-directory ${{ env.TEST_RESULTS_DIR }} \
            --verbosity normal

          # Generate reports
          reportgenerator \
            -reports:${{ env.TEST_RESULTS_DIR }}/**/coverage.cobertura.xml \
            -targetdir:${{ env.TEST_RESULTS_DIR }}/report \
            -reporttypes:Html

          # Process results
          passed=$(grep -oP 'outcome="Passed"' ${{ env.TEST_RESULTS_DIR }}/test-results.trx | wc -l)
          failed=$(grep -oP 'outcome="Failed"' ${{ env.TEST_RESULTS_DIR }}/test-results.trx | wc -l)
          coverage_file=$(find ${{ env.TEST_RESULTS_DIR }} -name coverage.cobertura.xml | head -1)
          total_lines=$(grep -oP 'lines-covered="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
          total_possible=$(grep -oP 'lines-valid="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
          percent=$(awk "BEGIN {printf \"%.2f\", ($total_lines/($total_possible+0.000001))*100}")

          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "percentage=$percent" >> $GITHUB_OUTPUT

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: ${{ env.TEST_RESULTS_DIR }}/*.trx
          reporter: dotnet-trx

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            ${{ env.TEST_RESULTS_DIR }}/test-results.trx
            ${{ env.TEST_RESULTS_DIR }}/report
          retention-days: 7

      - name: Set up test summary
        if: always()
        run: |
          echo "### 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed Tests | ${{ steps.run-tests.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed Tests | ${{ steps.run-tests.outputs.failed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Code Coverage | ${{ steps.run-tests.outputs.percentage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts**" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Results Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY