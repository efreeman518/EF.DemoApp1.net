name: Pre-build-deploy-tests

on:
  push:
    branches:
      - main

  workflow_dispatch:
    # inputs:
    #   environment:
    #     type: choice
    #     description: Select environment
    #     required: true
    #     options:
    #       - dev
    #       - prod

permissions:
  id-token: write
  contents: write
  checks: write
  pages: write  # Required for GitHub Pages deployment

env:
  DOTNET_VERSION: '9.x'
  TEST_RESULTS_DIR: './TestResults'
  TEST_PROJECTS: 'Test.Unit/Test.Unit.csproj' # Test.Unit2/Test.Unit2.csproj' # Add/remove projects

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # outputs:
    #   build-run-id: ${{ steps.upload-artifact.outputs.run-id }}
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}  # Default to dev if not specified

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore test project dependencies
        run: |
          for project in ${{ env.TEST_PROJECTS }}; do
            dotnet restore $project
          done

      - name: Build test projects
        run: |
          for project in ${{ env.TEST_PROJECTS }}; do
            dotnet build $project --configuration Release --no-restore
          done

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run tests with coverage
        id: run-tests
        run: |
          # Clean and create results directory
          rm -rf "$TEST_RESULTS_DIR"
          mkdir -p "$TEST_RESULTS_DIR"

          # Verify coverlet.runsettings exists
          if [ ! -f "coverlet.runsettings" ]; then
            echo "##[warning] coverlet.runsettings not found, using defaults"
            echo '<?xml version="1.0" encoding="utf-8"?>
            <RunSettings>
              <DataCollectionRunSettings>
                <DataCollectors>
                  <DataCollector friendlyName="XPlat code coverage">
                    <Configuration>
                      <Format>cobertura</Format>
                      <Exclude>[Test.*]*,[*.Tests]*</Exclude>
                    </Configuration>
                  </DataCollector>
                </DataCollectors>
              </DataCollectionRunSettings>
            </RunSettings>' > coverlet.runsettings
          fi

          # Initialize variables
          any_failed=false

          for project in $TEST_PROJECTS; do
            project_name=$(basename "$project" .csproj)
            echo "Running tests for: $project"
            
            if ! dotnet test "$project" \
              --configuration Release \
              --no-build \
              --collect:"XPlat Code Coverage" \
              --settings:coverlet.runsettings \
              --logger "trx;LogFileName=$project_name-results.trx" \
              --results-directory "$TEST_RESULTS_DIR"; then
              any_failed=true
            fi
          done

          # Verify test results exist
          if [ -z "$(ls -A "$TEST_RESULTS_DIR"/*.trx 2>/dev/null)" ]; then
            echo "##[error] No test results found in $TEST_RESULTS_DIR"
            exit 1
          fi

          # Generate coverage report
          reportgenerator \
            -reports:"$TEST_RESULTS_DIR"/**/coverage.cobertura.xml \
            -targetdir:"$TEST_RESULTS_DIR"/report \
            -reporttypes:Html

          # Process test results
          total_passed=0
          total_failed=0
          for trx in "$TEST_RESULTS_DIR"/*.trx; do
            passed=$(grep -oP 'outcome="Passed"' "$trx" | wc -l)
            failed=$(grep -oP 'outcome="Failed"' "$trx" | wc -l)
            total_passed=$((total_passed + passed))
            total_failed=$((total_failed + failed))
          done

          # Process coverage data
          coverage_file=$(find "$TEST_RESULTS_DIR" -name coverage.cobertura.xml | head -1)
          if [ -f "$coverage_file" ]; then
            total_lines=$(grep -oP 'lines-covered="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
            total_possible=$(grep -oP 'lines-valid="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
            percent=$(awk "BEGIN {printf \"%.2f\", ($total_lines/($total_possible+0.000001))*100}")
          else
            percent=0
            echo "##[warning] No coverage file found"
          fi

          echo "passed=$total_passed" >> $GITHUB_OUTPUT
          echo "failed=$total_failed" >> $GITHUB_OUTPUT
          echo "percentage=$percent" >> $GITHUB_OUTPUT

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()  # ensure it runs even if previous steps fail
        with:
          name: Unit Test Results
          path: '**/*.trx' #${{ env.TEST_RESULTS_DIR }}/*.trx
          reporter: dotnet-trx
          fail-on-error: false
          list-suites: all
          list-tests: all
          max-annotations: 10
      
      - name: Get check run URL for Unit Test Results
        id: get-check-run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs
          mediaType: |
            format: json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Unit Test Results check run URL
        id: extract-check-url
        run: |
          html_url=$(echo '${{ steps.get-check-run.outputs.data }}' \
            | jq -r '.check_runs[] | select(.name == "Unit Test Results") | .html_url')
          echo "html_url=$html_url" >> $GITHUB_OUTPUT

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_number }}
          path: |
            ${{ env.TEST_RESULTS_DIR }}/*.trx
            ${{ env.TEST_RESULTS_DIR }}/report
          retention-days: 7
      
      - name: Set up test summary
        if: always()
        run: |
          REPO_URL="https://$(echo ${{ github.repository }} | sed 's|/|.github.io/|')"

          echo "### 🧪 Unit Test Summary" >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.run-tests.outputs.failed }} -gt 0 ]; then
            echo "❌ **There were ${{ steps.run-tests.outputs.failed }} test failures**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All tests passed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "#### Projects Tested" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.TEST_PROJECTS }}" | tr ' ' '\n' | sed 's|^|- |' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed Tests | ${{ steps.run-tests.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed Tests | ${{ steps.run-tests.outputs.failed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Code Coverage | ${{ steps.run-tests.outputs.percentage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts**" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Summary](${{ steps.extract-check-url.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📄 Coverage Report on GitHub Pages]($REPO_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Test Results and HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 The HTML coverage report is located in: \`report/index.html\` inside the downloaded artifact." >> $GITHUB_STEP_SUMMARY

          # Fail the job if any tests failed
          if $any_failed; then
            echo "##[error] There were test failures"
            exit 1
          fi

  deploy-to-pages:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results-${{ github.run_number }}
          path: report-artifact

      - name: Copy HTML report to output folder
        run: |
          mkdir -p ./public
          cp -r report-artifact/report/* ./public/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
