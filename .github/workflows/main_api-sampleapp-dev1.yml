# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy SampleApp.Api to Azure Web App - api-sampleapp-dev1

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '9.x'
  AZURE_WEBAPP_NAME: 'api-sampleapp-dev1'
  AZURE_RESOURCE_GROUP: 'rg-dev1'
  APP_SERVICE_NAME: api-sampleapp-dev1
  ACI_NAME: deploy-temp-aci
  ACI_SUBNET: subnet-aci-dev1
  ACI_VNET: vnet-dev1
  REGION: eastus2  # Change as needed
  ZIP_NAME: sampleapp-api.zip

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./SampleApp.Api/SampleApp.Api.csproj

      - name: Build
        run: dotnet build ./SampleApp.Api/SampleApp.Api.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish SampleApp.Api/SampleApp.Api.csproj -c Release -o publish_output

      - name: Zip published output
        run: zip -r ${{ env.ZIP_NAME }} publish_output

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sampleapp-api
          path: ${{ env.ZIP_NAME }}

  deploy-via-aci:
    needs: build-and-package
    runs-on: ubuntu-latest
    name: Deploy via ACI

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: sampleapp-api
          path: ./artifact

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to Azure Storage (temp container)
        run: |
          STORAGE_ACCOUNT="samplestorage$RANDOM"
          az storage account create \
            --name $STORAGE_ACCOUNT \
            --resource-group $AZURE_RESOURCE_GROUP \
            --location $REGION \
            --sku Standard_LRS \
            --kind StorageV2

          CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group $AZURE_RESOURCE_GROUP --query connectionString -o tsv)

          az storage container create --name deploy --connection-string "$CONNECTION_STRING"

          az storage blob upload \
            --connection-string "$CONNECTION_STRING" \
            --container-name deploy \
            --file ./artifact/${{ env.ZIP_NAME }} \
            --name ${{ env.ZIP_NAME }}

      - name: Start Temporary ACI
        run: |
          az container create \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $ACI_NAME \
            --os-type Linux \
            --image mcr.microsoft.com/azure-cli \
            --vnet $ACI_VNET \
            --subnet $ACI_SUBNET \
            --cpu 1 \
            --memory 1.5 \
            --location $REGION \
            --command-line "sleep 3600" \
            --restart-policy Never

          echo "Waiting for ACI to initialize..."
          sleep 30

      - name: Write deploy script locally
        run: |
          cat <<'EOF' > deploy_script.sh
          #!/bin/bash
          set -e

          echo "Installing unzip and curl..."
          apt-get update && apt-get install -y unzip curl

          echo "Downloading artifact zip from storage..."
          curl -O https://${{ env.STORAGE_ACCOUNT }}.blob.core.windows.net/deploy/${{ env.ZIP_NAME }}

          echo "Unzipping artifact..."
          unzip ${{ env.ZIP_NAME }} -d app

          echo "Deploying to Azure App Service..."
          az webapp deploy \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.APP_SERVICE_NAME }} \
            --src-path app \
            --type zip \
            --restart true
          EOF

      - name: Copy deploy script into ACI
        run: |
          az container exec \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.ACI_NAME }} \
            --exec-command "bash -c 'cat > /tmp/deploy_script.sh'" < deploy_script.sh

      - name: Make deploy script executable in ACI
        run: |
          az container exec \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.ACI_NAME }} \
            --exec-command "chmod +x /tmp/deploy_script.sh"

      - name: Run deploy script in ACI
        run: |
          az container exec \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.ACI_NAME }} \
            --exec-command "bash /tmp/deploy_script.sh"

      - name: Cleanup ACI and Storage
        run: |
          az container delete -g $AZURE_RESOURCE_GROUP -n $ACI_NAME --yes
          az storage account delete --name $STORAGE_ACCOUNT --resource-group $AZURE_RESOURCE_GROUP --yes
