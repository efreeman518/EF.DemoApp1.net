# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy SampleApp.Api to Azure Web App - api-sampleapp-dev1

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '9.x'
  RESOURCE_GROUP: 'rg-dev1'
  APP_SERVICE_NAME: api-sampleapp-dev1
  ACI_NAME: aci-temp-deploy
  ACI_SUBNET: subnet-aci-dev1
  ACI_VNET: vnet-dev1
  CONTAINER_IMAGE: efreeman518/aci-deployer:latest
  CONTAINER_SUBNET_ID: /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-dev1/providers/Microsoft.Network/virtualNetworks/vnet-dev1/subnets/subnet-aci-dev1
  REGION: eastus2  # Change as needed
  ZIP_NAME: sampleapp-api.zip

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./SampleApp.Api/SampleApp.Api.csproj

      - name: Build
        run: dotnet build ./SampleApp.Api/SampleApp.Api.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish SampleApp.Api/SampleApp.Api.csproj -c Release -o publish_output

      - name: Zip published output
        run: zip -r ${{ env.ZIP_NAME }} publish_output

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sampleapp-api
          path: ${{ env.ZIP_NAME }}

      - name: Upload deploy script
        uses: actions/upload-artifact@v4
        with:
          name: deploy-script
          path: .github/workflows/script/deploy_script.sh

  deploy-via-aci:
    needs: build-and-package
    runs-on: ubuntu-latest
    name: Deploy via ACI

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: sampleapp-api
          path: ./artifact

      - name: Download deploy script
        uses: actions/download-artifact@v4
        with:
          name: deploy-script
          path: ./artifact

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to Azure Storage (temp blob storage & container)
        run: |
          STORAGE_ACCOUNT="stgtmpdeploy$RANDOM"
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

          az storage account create \
            --name $STORAGE_ACCOUNT \
            --resource-group $RESOURCE_GROUP \
            --location $REGION \
            --sku Standard_LRS \
            --kind StorageV2

          CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --query connectionString -o tsv)

          az storage container create --name deploy --connection-string "$CONNECTION_STRING"

          az storage blob upload \
            --connection-string "$CONNECTION_STRING" \
            --container-name deploy \
            --file ./artifact/${{ env.ZIP_NAME }} \
            --name ${{ env.ZIP_NAME }}

          az storage blob upload \
            --connection-string "$CONNECTION_STRING" \
            --container-name deploy \
            --file ./artifact/deploy_script.sh \
            --name deploy_script.sh

      - name: Start Temporary ACI (with deploy script)
        run: |
          SAS_TOKEN=$(az storage blob generate-sas \
            --account-name $STORAGE_ACCOUNT \
            --container-name deploy \
            --name deploy_script.sh \
            --permissions r \
            --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ') \
            --output tsv)

          SCRIPT_URL="https://${STORAGE_ACCOUNT}.blob.core.windows.net/deploy/deploy_script.sh?$SAS_TOKEN"
          
          az container create \
            --resource-group $RESOURCE_GROUP \
            --name $ACI_NAME \
            --os-type Linux \
            --image mcr.microsoft.com/azure-cli \
            --vnet $ACI_VNET \
            --subnet $ACI_SUBNET \
            --cpu 1 \
            --memory 1.5 \
            --location $REGION \
            --restart-policy Never \
            --command-line "/bin/sh -c 'echo Installing dependencies && apk update && apk add --no-cache curl bash unzip && echo Downloading deploy script && curl -sSL ${SCRIPT_URL} -o deploy.sh && chmod +x deploy.sh && ./deploy.sh'" \
            --environment-variables \
                RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} \
                APP_NAME=${{ env.APP_SERVICE_NAME }} \
                ZIP_NAME=${{ env.ZIP_NAME }} \
                STORAGE_ACCOUNT=${{ env.STORAGE_ACCOUNT }}
      
      - name: Delay briefly before checking ACI status
        run: sleep 10
        
      - name: Wait for ACI to be ready
        run: |
          echo "Waiting for container '${ACI_NAME}' in resource group '${RESOURCE_GROUP}' to reach 'Running' state..."
          for i in {1..30}; do
            STATUS=$(az container show --name "$ACI_NAME" --resource-group "$RESOURCE_GROUP" --query "instanceView.state" -o tsv 2>/dev/null || echo "NotFound")
            echo "Current status: $STATUS"
      
            if [[ "$STATUS" == "Running" ]]; then
              echo "Container is running."
              break
            fi
      
            if [[ "$STATUS" == "Terminated" || "$STATUS" == "Failed" || "$STATUS" == "NotFound" ]]; then
              echo "Container failed, terminated early, or not found. Exiting."
              az container logs --resource-group "$RESOURCE_GROUP" --name "$ACI_NAME" || echo "Failed to fetch logs"
              exit 1
            fi
      
            sleep 10
          done
          
      - name: Copy deploy script into ACI
        run: |
          az container exec \
            --resource-group $RESOURCE_GROUP \
            --name $ACI_NAME \
            --exec-command "mkdir -p /app && cat > /app/deploy_script.sh" < .github/workflows/script/deploy_script.sh

          az container exec \
            --resource-group $RESOURCE_GROUP \
            --name $ACI_NAME \
            --exec-command "chmod +x /app/deploy_script.sh"

      - name: Run deploy script in ACI with environment variables
        run: |
          az container exec \
            --resource-group $RESOURCE_GROUP \
            --name $ACI_NAME \
            --exec-command "/bin/bash -c 'export STORAGE_ACCOUNT=${STORAGE_ACCOUNT} ZIP_NAME=${ZIP_NAME} RESOURCE_GROUP=${RESOURCE_GROUP} APP_NAME=${APP_SERVICE_NAME} && /app/deploy_script.sh'"

      - name: Cleanup ACI and Storage
        run: |
          az container delete \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.ACI_NAME }} \
            --yes
          az storage account delete \
            --name $STORAGE_ACCOUNT \
            --resource-group $RESOURCE_GROUP \
            --yes
