# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy SampleApp.Api to Azure Web App - api-sampleapp-dev1

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'

env:
  DOTNET_VERSION: '9.x'
  AZURE_WEBAPP_NAME: 'api-sampleapp-dev1'
  AZURE_RESOURCE_GROUP: 'rg-dev1'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./SampleApp.Api/SampleApp.Api.csproj

      - name: Build
        run: dotnet build ./SampleApp.Api/SampleApp.Api.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ./SampleApp.Api/SampleApp.Api.csproj -c Release -o publish

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sampleapp-artifact
          path: publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment }}
      # url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: sampleapp-artifact
          path: publish

      - name: Zip artifact
        run: zip -r sampleapp-artifact.zip publish

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload artifact to blob
        run: |
          az storage blob upload \
            --account-name stgef1dev1 \
            --container-name temp-deploy-artifacts \
            --name sampleapp-artifact.zip \
            --file publish/sampleapp-artifact.zip \
            --auth-mode login \
            --overwrite

      # - name: Deploy to Azure Web App
      #   id: deploy-to-webapp
      #   uses: azure/webapps-deploy@v3
      #   with:
      #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
      #     slot-name: 'Production'
      #     package: .
      - name: Deploy using temporary Azure Container Instance
        run: |
          containerName=deploy-temp-container
          blobUrl="https://<yourstorageaccount>.blob.core.windows.net/temp-deploy-artifacts/sampleapp-artifact.zip"

          az container create \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $containerName \
            --image mcr.microsoft.com/dotnet/sdk:9.0 \
            --os-type Linux \
            --vnet vnet-dev1 \
            --subnet subnet-aci-dev1 \
            --restart-policy Never \
            --command-line "/bin/sh -c '
            apt update && apt install -y curl unzip zip && \
            curl -sL https://aka.ms/InstallAzureCLIDeb | bash && \
            curl -o app.zip \"$blobUrl\" && \
            az webapp deployment source config-zip \
                --resource-group $AZURE_RESOURCE_GROUP \
                --name $AZURE_WEBAPP_NAME \
                --src app.zip'" \
            --environment-variables AZURE_WEBAPP_NAME=$AZURE_WEBAPP_NAME AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP

      - name: Wait for container to complete
        run: |
          az container wait \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name deploy-temp-container \
            --custom "instanceView.state=='Terminated'"

      - name: Cleanup container and blob
        run: |
          az container delete --name deploy-temp-container --resource-group $AZURE_RESOURCE_GROUP --yes
          az storage blob delete \
            --account-name <yourstorageaccount> \
            --container-name temp-deploy-artifacts \
            --name sampleapp-artifact.zip \
            --auth-mode login

      #     # Wait until the container finishes running
      #     az container wait \
      #       --name "$containerName" \
      #       --resource-group "$AZURE_RESOURCE_GROUP" \
      #       --custom "containerInstance.instanceView.state=='Terminated'"

      #     echo "Cleaning up container..."
      #     az container delete --name "$containerName" --resource-group "$AZURE_RESOURCE_GROUP" --yes

      # - name: Final ACI cleanup fallback
      #   if: always()
      #   run: |
      #     echo "Final container cleanup (in case of failure)..."
      #     az container delete --name deploy-temp-container --resource-group $AZURE_RESOURCE_GROUP --yes || true
