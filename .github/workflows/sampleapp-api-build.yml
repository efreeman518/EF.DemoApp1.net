name: Build SampleApp.Api

on:
  workflow_run:
    workflows: ["Pre-build-deploy-tests"]
    types:
      - completed

  # push:
  #   branches:
  #     - main

  workflow_dispatch:
    # inputs:
    #   environment:
    #     type: choice
    #     description: Select environment
    #     required: true
    #     options:
    #       - dev
    #       - prod

env:
  DOTNET_VERSION: '9.x'

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}  # Default to dev if not specified
    outputs:
      build-run-id: ${{ steps.upload-artifact.outputs.run-id }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore 
        run: dotnet restore ./SampleApp.Api/SampleApp.Api.csproj

      - name: Publish (includes build)
        run: dotnet publish ./SampleApp.Api/SampleApp.Api.csproj -c Release -o publish --no-restore

      # - name: Install ReportGenerator
      #   run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # - name: Run tests with coverage and reporting
      #   id: run-tests
      #   run: |
      #     # Clean previous results
      #     rm -rf ./TestResults
      #     mkdir -p ./TestResults

      #     # Run tests through solution file with coverage
      #     dotnet test ./EF.SampleApp1.net.sln \
      #       --configuration Release \
      #       --collect:"XPlat Code Coverage" \
      #       --settings:./coverlet.runsettings \
      #       --logger "trx;LogFileName=./TestResults/test-results.trx" \
      #       --results-directory ./TestResults \
      #       --verbosity normal \
      #       --no-build \
      #       --blame

      #     # Process coverage results (assuming OpenCover or Cobertura format)
      #     reportgenerator \
      #       -reports:./TestResults/*/coverage.cobertura.xml \
      #       -targetdir:./TestResults/report \
      #       -reporttypes:Html

      #     # Extract test counts from TRX
      #     passed=$(grep -oP 'outcome="Passed"' ./TestResults/test-results.trx | wc -l)
      #     failed=$(grep -oP 'outcome="Failed"' ./TestResults/test-results.trx | wc -l)
      #     echo "passed=$passed" >> $GITHUB_OUTPUT
      #     echo "failed=$failed" >> $GITHUB_OUTPUT

      #     # Extract coverage percentage
      #     coverage_file=$(find ./TestResults -name coverage.cobertura.xml | head -1)
      #     total_lines=$(grep -oP 'lines-covered="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
      #     total_possible=$(grep -oP 'lines-valid="\K\d+' "$coverage_file" | awk '{s+=$1} END {print s}')
      #     percent=$(awk "BEGIN {printf \"%.2f\", ($total_lines/($total_possible+0.000001))*100}")
      #     echo "percentage=$percent" >> $GITHUB_OUTPUT

      # - name: Test Reporter (GitHub Checks UI)
      #   uses: dorny/test-reporter@v1
      #   if: always()
      #   with:
      #     name: Unit Tests
      #     path: ./TestResults/*.trx
      #     reporter: dotnet-trx

      # - name: Write summary to GitHub Actions UI
      #   if: always()
      #   run: |
      #     echo "### 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
      #     echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
      #     echo "| ✅ Passed | ${{ steps.run-tests.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
      #     echo "| ❌ Failed | ${{ steps.run-tests.outputs.failed }} |" >> $GITHUB_STEP_SUMMARY
      #     echo "| 📈 Coverage | ${{ steps.run-tests.outputs.percentage }}% |" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "🔍 [View HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # - name: Upload test artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results
      #     path: |
      #       ./TestResults/test-results.trx
      #       ./TestResults/report

      - name: Publish (only if tests passed)
        if: success()
        run: dotnet publish ./SampleApp.Api/SampleApp.Api.csproj -c Release -o publish --no-build

      - name: Zip published output (only if tests passed)
        if: steps.unit-tests-step.outcome == 'success'
        run: |
          cd publish
          zip -r ../artifact.zip .

        #default stored for 90 days in GitHub Actions artifact storage
      - name: Upload artifact (only if tests passed)
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: artifact.zip
          