name: Build and Publish NuGet Packages

on:
  push:
    branches: [ main ]
    paths:
      - 'Package/**'
      - '.github/workflows/nuget-publish.yml'
  workflow_dispatch:  # Allows manual triggering
    inputs:
      major_version:
        description: 'Major version number'
        required: false
        default: ''
      minor_version:
        description: 'Minor version number'
        required: false
        default: ''

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: write  # Allow pushing version file changes
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Set package version
      id: set_version
      run: |
        # Get current version from version.txt or default to 1.0
        if [ -f "version.txt" ]; then
          CURRENT_VERSION=$(cat version.txt)
          MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f2)
        else
          MAJOR_VERSION="1"
          MINOR_VERSION="0"
        fi
        
        # Check commit messages
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"[bump major]"* ]]; then
          MAJOR_VERSION=$((MAJOR_VERSION + 1))
          MINOR_VERSION="0"
          # Update version file for future runs
          echo "$MAJOR_VERSION.$MINOR_VERSION" > version.txt
        elif [[ "$COMMIT_MSG" == *"[bump minor]"* ]]; then
          MINOR_VERSION=$((MINOR_VERSION + 1))
          # Update version file for future runs
          echo "$MAJOR_VERSION.$MINOR_VERSION" > version.txt
        fi
        
        # Override with manual inputs if provided
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && ! -z "${{ github.event.inputs.major_version }}" ]]; then
          MAJOR_VERSION="${{ github.event.inputs.major_version }}"
          # Update version file for future runs
          echo "$MAJOR_VERSION.$MINOR_VERSION" > version.txt
        fi
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && ! -z "${{ github.event.inputs.minor_version }}" ]]; then
          MINOR_VERSION="${{ github.event.inputs.minor_version }}"
          # Update version file for future runs
          echo "$MAJOR_VERSION.$MINOR_VERSION" > version.txt
        fi
        
        # Use github.run_number as patch version
        PATCH_VERSION="${{ github.run_number }}"
        
        # Set semantic version
        VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Package Version: $VERSION"
        
        # Commit the version file changes if they happened
        if [[ "${{ github.event_name }}" != "workflow_dispatch" && (-n "$(git status --porcelain version.txt 2>/dev/null)") ]]; then
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add version.txt
          git commit -m "Bump version to $MAJOR_VERSION.$MINOR_VERSION [skip ci]"
          git push
        fi
      
    - name: Create NuGet packages
      run: |
        # Find all Package.* directories with .csproj files
        find Package -name "*.csproj" -type f | while read project; do
          # Skip test projects
          if [[ "$project" == *"Test"* ]]; then
            echo "Skipping test project: $project"
            continue
          fi
          
          echo "Packing project: $project"
          dotnet pack "$project" \
            --configuration Release \
            --no-build \
            --output ./nupkgs \
            /p:PackageVersion=$PACKAGE_VERSION \
            /p:IncludeSymbols=true \
            /p:SymbolPackageFormat=snupkg
        done
        
    - name: Push NuGet packages to GitHub
      run: |
        # Configure NuGet source with GitHub packages
        dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        # Push all packages to GitHub packages
        dotnet nuget push "./nupkgs/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source github --skip-duplicate