# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Deploy SampleApp.UI

on:
  workflow_run:
    workflows: ["Build SampleApp.UI"]
    types:
      - completed

  # workflow_dispatch:
  #   inputs:
  #     environment:
  #       type: choice
  #       description: Select environment
  #       required: true
  #       options:
  #         - dev
  #         - prod

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      - name: debug
        run: |
          echo "github.event.workflow_run.id = ${{ github.event.workflow_run.id }}" 
          echo "github.repository = ${{ github.repository }}"
          echo "secrets.GITHUB_TOKEN = ${{ secrets.GITHUB_TOKEN }}"
          echo "github.event.inputs.environment = ${{ github.event.inputs.environment }}"
          echo "steps.deploy-to-webapp.outputs.webapp-url = ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          echo "vars.APP_SERVICE_NAME_GATEWAY = ${{ vars.APP_SERVICE_NAME_GATEWAY }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
        # These are created manually in Github repo secrets (manual EntraID appreg for deployment with OIDC federated credentials))
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./artifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for the current repo

      # - name: List .zip contents for debug
      #   run: unzip -l ./artifact/artifact.zip

      - name: Extract artifact.zip & replace settings
        run: |
          mkdir deploy
          unzip ./artifact/artifact.zip -d deploy

      - name: Replace environment specific appsettings.json placeholders
        run: |
          if [ ! -f ./deploy/wwwroot/appsettings.json ]; then
            echo "appsettings.json not found in deploy/wwwroot"; exit 1;
          fi
          sed -i 's|__SETTINGS_AZUREB2C_CLIENTID__|${{ vars.SETTINGS_AZUREB2C_CLIENTID }}|g' "./deploy/wwwroot/appsettings.json"
          sed -i 's|__SETTINGS_GATEWAY_BASEURL__|${{ vars.SETTINGS_GATEWAY_BASEURL }}|g' "./deploy/wwwroot/appsettings.json"
          sed -i 's|__SETTINGS_GATEWAY_SCOPE1__|${{ vars.SETTINGS_GATEWAY_SCOPE1 }}|g' "./deploy/wwwroot/appsettings.json"

      # - name: List contents of deploy folder for debug
      #   run: |
      #     echo "Listing files in ./deploy:"
      #     ls -R ./deploy

      - name: Upload to Azure Storage (using OIDC)
        run: |
          az storage blob upload-batch \
            --account-name ${{ vars.UI_HOST_STORAGE_ACCOUNT_NAME }} \
            --destination \$web \
            --source ./deploy \
            --overwrite \
            --auth-mode login
            #--only-show-errors

      #Purge CDN
      # - name: Purge Azure CDN endpoint cache
      #   run: |
      #     az cdn endpoint purge \
      #       --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
      #       --profile-name ${{ vars.CDN_PROFILE_NAME }} \
      #       --name ${{ vars.CDN_ENDPOINT_NAME }} \
      #       --content-paths '/*' \
      #       --only-show-errors

  deploy-prod:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./artifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for the current repo

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
        # These are created manually in Github repo secrets (manual EntraID appreg for deployment with OIDC federated credentials))
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to Azure Storage (using OIDC)
        run: |
          az storage blob upload-batch \
            --account-name ${{ vars.UI_HOST_STORAGE_ACCOUNT_NAME }} \
            --destination \$web \
            --source ./deploy \
            --overwrite \
            --auth-mode login
