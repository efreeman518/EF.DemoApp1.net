# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Deploy SampleApp.UI

on:
  workflow_run:
    workflows: ["Build SampleApp.UI"]
    types:
      - completed

  # workflow_dispatch:
  #   inputs:
  #     environment:
  #       type: choice
  #       description: Select environment
  #       required: true
  #       options:
  #         - dev
  #         - prod

jobs:
  deploy-dev:
    # Only run if the upstream workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      - name: debug
        run: |
          echo "github.event.workflow_run.id = ${{ github.event.workflow_run.id }}" 
          echo "github.repository = ${{ github.repository }}"
          echo "secrets.GITHUB_TOKEN = ${{ secrets.GITHUB_TOKEN }}"
          echo "github.event.inputs.environment = ${{ github.event.inputs.environment }}"
          echo "steps.deploy-to-webapp.outputs.webapp-url = ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          echo "vars.APP_SERVICE_NAME_GATEWAY = ${{ vars.APP_SERVICE_NAME_GATEWAY }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
        # These are created manually in Github repo secrets (manual EntraID appreg for deployment with OIDC federated credentials))
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./artifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for the current repo - GitHub OIDC

      # - name: List .zip contents for debug
      #   run: unzip -l ./artifact/artifact.zip

      - name: Extract artifact.zip
        run: |
          mkdir deploy
          unzip ./artifact/artifact.zip -d deploy

      - name: Replace appsettings.json placeholders
        env:
          CLIENTID: ${{ vars.SETTINGS_AZUREB2C_CLIENTID }}
          BASEURL: ${{ vars.SETTINGS_GATEWAY_BASEURL }}
          SCOPE1: ${{ vars.SETTINGS_GATEWAY_SCOPE1 }}
          REDIRECTURI: ${{ vars.SETTINGS_AZUREB2C_REDIRECTURI }}
        run: |
          sed -i "s|__SETTINGS_AZUREB2C_CLIENTID__|$CLIENTID|g" ./deploy/appsettings.json
          sed -i "s|__SETTINGS_GATEWAY_BASEURL__|$BASEURL|g" ./deploy/appsettings.json
          sed -i "s|__SETTINGS_GATEWAY_SCOPE1__|$SCOPE1|g" ./deploy/appsettings.json
          sed -i "s|__SETTINGS_AZUREB2C_REDIRECTURI__|$REDIRECTURI|g" ./deploy/appsettings.json

      #debug
      - name: Show output substituted config
        run: cat ./deploy/appsettings.json

      - name: List contents of deploy folder for debug
        run: |
          echo "Listing files in ./deploy:"
          ls -R ./deploy

      # - name: Echo the swa deploy token
      #   run: |
      #     echo "SWA_DEPLOYMENT_TOKEN: ${{ secrets.UI_STATICWEBAPP_DEPLOYMENT_TOKEN }}"

      #Another attempt
      # - name: Install OIDC Client from Core Package
      #   run: npm install @actions/core@1.6.0 @actions/http-client
      # - name: Get Id Token
      #   uses: actions/github-script@v6
      #   id: idtoken
      #   with:
      #      script: |
      #          const coredemo = require('@actions/core')
      #          return await coredemo.getIDToken()
      #      result-encoding: string
      # - name: Build And Deploy
      #   id: builddeploy
      #   uses: Azure/static-web-apps-deploy@v1
      #   with:
      #     #azure_static_web_apps_api_token: 160affb89155b46cbebe33ddb1bd8f61c98c8648ce6405697b2c8363ddd0248306-1375ab0d-4172-414f-b6a0-1908abfc602600f10200d69a4a0f
      #     action: "upload"
      #     ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
      #     # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
      #     skip_app_build: true
      #     app_location: "./deploy" # App source code path
      #     api_location: "" # Api source code path - optional
      #     #output_location: "dist/angular-basic" # Built app content directory - optional
      #     #production_branch: "dev"
      #     github_id_token: ${{ steps.idtoken.outputs.result }}
      #     ###### End of Repository/Build Configurations ######

      #Attempt to deploy using SWA CLI - same errors Bad Request from swa
      # - name: Install SWA CLI
      #   run: npm install -g @azure/static-web-apps-cli

      # - name: Deploy using SWA CLI
      #   env:
      #     SWA_CLI_DEPLOYMENT_TOKEN: ${{ secrets.UI_STATICWEBAPP_DEPLOYMENT_TOKEN }}
      #   run: |
      #     swa deploy ./deploy --deployment-token ${{ secrets.UI_STATICWEBAPP_DEPLOYMENT_TOKEN }} --env Production --verbose --no-cache

      #Azure static web apps hosting (using static webap deployment token)
      #https://learn.microsoft.com/en-us/azure/static-web-apps/build-configuration?tabs=identity&pivots=github-actions#build-and-deploy
      # - name: Deploy to Azure Static Web Apps
      #   uses: Azure/static-web-apps-deploy@v1
      #   with:
      #     #azure_static_web_apps_api_token: ${{ secrets.UI_STATICWEBAPP_DEPLOYMENT_TOKEN }}
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}  # For issues, PRs; GitHub Actions automatically uses the OIDC token.
      #     action: "upload"
      #     skip_app_build: true
      #     app_location: "./deploy"  # Ensure this points to the folder containing the static files


      #Azure blob storage hosting
      - name: Upload to Azure Storage (using OIDC)
        run: |
          az storage blob upload-batch \
            --account-name ${{ vars.UI_HOST_STORAGE_ACCOUNT_NAME }} \
            --destination \$web \
            --source ./deploy \
            --overwrite \
            --auth-mode login
            #--only-show-errors


  deploy-prod:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./artifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for the current repo

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
        # These are created manually in Github repo secrets (manual EntraID appreg for deployment with OIDC federated credentials))
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      #Azure blob storage hosting
      - name: Upload to Azure Storage (using OIDC)
        run: |
          az storage blob upload-batch \
            --account-name ${{ vars.UI_HOST_STORAGE_ACCOUNT_NAME }} \
            --destination \$web \
            --source ./deploy \
            --overwrite \
            --auth-mode login
