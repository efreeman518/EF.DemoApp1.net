name: 'Deploy via ACI'
description: 'Deploy zip artifact to App Service via ACI'

inputs:
  github-run-id:
    description: 'GitHub Run ID for uniqueness'
    required: true
  github-token:
    description: 'GitHub token for accessing artifacts'
    required: true
  artifact-path:
    description: 'Path to the downloaded artifact to be deployed'
    required: true
  environment:
    description: 'Target environment (dev, test, stage, prod)'
    required: true
  resource-group:
    description: 'Resource group for the deployment'
    required: true
  region:
    description: 'Region for creating deployment resources'
    required: true
  identity-resource-id:
    description: 'Resource ID (mamanged identity id) for ACI'
    required: true
  aci-vnet: 
    description: 'VNET for ACI deployment'
    required: true
  aci-subnet:
    description: 'Subnet for ACI deployment'
    required: true
  app-service-name:
    description: 'Name of the deployment target Azure App Service'
    required: true
  client-id:
    description: 'caller client-id'
    required: true
  tenant-id:
    description: 'caller tenant-id'
    required: true
  subscription-id:
    description: 'caller subscription-id'
    required: true

runs:
  using: "composite"
  steps:
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}

    - name: Create temporary storage account & container
      shell: bash
      run: |
        STORAGE_ACCOUNT="stgtmp${{ inputs.github-run-id }}$(openssl rand -hex 3 | tr -dc 'a-z0-9')"
        STORAGE_ACCOUNT=$(echo "$STORAGE_ACCOUNT" | tr '[:upper:]' '[:lower:]' | cut -c 1-24)  # Storage account names must be 3-24 chars
        echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

        az storage account create \
          --name $STORAGE_ACCOUNT \
          --resource-group ${{ inputs.resource-group }} \
          --location ${{ inputs.region }} \
          --sku Standard_LRS \
          --kind StorageV2

        CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group ${{ inputs.resource-group }} --query connectionString -o tsv)

        az storage container create --name deploy --connection-string "$CONNECTION_STRING"

        az storage blob upload \
          --connection-string "$CONNECTION_STRING" \
          --container-name deploy \
          --file ./artifact/artifact.zip \
          --name artifact.zip

        SAS_TOKEN=$(az storage blob generate-sas \
          --account-name $STORAGE_ACCOUNT \
          --container-name deploy \
          --name artifact.zip \
          --permissions r \
          --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ') \
          --output tsv)

        echo "ZIP_URL=https://${STORAGE_ACCOUNT}.blob.core.windows.net/deploy/artifact.zip?${SAS_TOKEN}" >> $GITHUB_ENV

    - name: Deploy via ACI
      shell: bash
      env:
        ACI_MEMORY: 2
        ACI_CPU: 1
        CONTAINER_IMAGE: 'mcr.microsoft.com/azure-cli:latest'
      run: |
        set -euo pipefail

        ACI_NAME=aci-deploy-${{ inputs.github-run-id }}

        cleanup() {
          echo "Performing cleanup..."
          az container delete \
            --resource-group ${{ inputs.resource-group }} \
            --name $ACI_NAME \
            --yes || echo "ACI cleanup failed"

          az storage account delete \
            --name $STORAGE_ACCOUNT \
            --resource-group ${{ inputs.resource-group }} \
            --yes || echo "Storage account cleanup failed"
        }

        trap cleanup EXIT

        az container create \
          --resource-group ${{ inputs.resource-group }} \
          --name $ACI_NAME \
          --os-type Linux \
          --image $CONTAINER_IMAGE \
          --vnet ${{ inputs.aci-vnet }} \
          --subnet ${{ inputs.aci-subnet }} \
          --cpu $ACI_CPU \
          --memory $ACI_MEMORY \
          --location  ${{ inputs.region }} \
          --restart-policy Never \
          --assign-identity ${{ inputs.identity-resource-id }} \
          --command-line "/bin/bash -c 'set -x && az login --identity && curl -sSL \"$ZIP_URL\" -o \"artifact.zip\" && az webapp deploy --resource-group \"${{ inputs.resource-group }}\" --name \"${{ inputs.app-service-name }}\" --src-path \"artifact.zip\" --type zip --restart false && echo Done && exit 0'"

        TIMEOUT_LIMIT=600  # Increase timeout from default to 10 minutes
        START_TIME=$(date +%s)

        # while true; do
        #     STATUS=$(az container show --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" --query "instanceView.state" -o tsv)
        #     echo "Current Status: $STATUS"

        #     if [[ "$STATUS" == "Succeeded" ]]; then
        #         echo "Deployment completed successfully"
        #         break
        #     elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
        #         echo "Deployment failed. Logs:"
        #         az container logs --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME"
        #         exit 1
        #     fi

        #     CURRENT_TIME=$(date +%s)
        #     ELAPSED=$((CURRENT_TIME - START_TIME))

        #     if [[ $ELAPSED -ge $TIMEOUT_LIMIT ]]; then
        #         echo "Timeout reached - deployment did not complete"
        #         exit 1
        #     fi

        #     sleep 10
        # done

        echo "Waiting for container to finish (by tailing logs)..."

        # while true; do
        #     az container logs --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" > logs.txt || true

        #     if grep -q "Finished with exit code" logs.txt; then
        #         echo "Detected container finish line:"
        #         cat logs.txt | grep "Finished with exit code"
        #         break
        #     fi

        #     CURRENT_TIME=$(date +%s)
        #     ELAPSED=$((CURRENT_TIME - START_TIME))

        #     if [[ $ELAPSED -ge $TIMEOUT_LIMIT ]]; then
        #         echo "Timeout reached while waiting for container to finish"
        #         exit 1
        #     fi

        #     sleep 10
        # done

        echo "Polling for container status..."

        SUCCESS_LOG="Deployment successful"

        while true; do
            LOGS=$(az container logs --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME")

            echo "$LOGS" | grep -q "$SUCCESS_LOG"
            if [[ $? -eq 0 ]]; then
                echo "Deployment confirmed via log output."
                break
            fi

            STATUS=$(az container show --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" --query "instanceView.state" -o tsv)
            echo "Current Status: $STATUS"

            if [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
                echo "Deployment failed or stopped. Logs:"
                echo "$LOGS"
                break
            fi

            CURRENT_TIME=$(date +%s)
            if (( CURRENT_TIME - START_TIME > TIMEOUT_LIMIT )); then
                echo "Timeout waiting for successful deployment. Logs:"
                echo "$LOGS"
                break
            fi

            sleep 10
        done

        # Print final logs
        cat logs.txt

        # Optional: grep out the final exit code
        EXIT_CODE=$(grep "Finished with exit code" logs.txt | tail -n1 | awk '{print $NF}')
        if [[ "$EXIT_CODE" != "0" ]]; then
          echo "Deployment failed with exit code $EXIT_CODE"
          exit "$EXIT_CODE"
        fi




        echo "Final container logs:"
        az container logs --resource-group ${{ inputs.resource-group }} --name $ACI_NAME

        if [[ "$STATUS" != "Succeeded" ]]; then
          echo "Timeout reached - deployment did not complete"
          exit 1
        fi

        echo "Restarting App Service after successful deployment..."
        az webapp restart \
          --resource-group "${{ inputs.resource-group }}" \
          --name "${{ inputs.app-service-name }}"

        # az container delete \
        #   --resource-group ${{ inputs.resource-group }} \
        #   --name $ACI_NAME \
        #   --yes || echo "ACI cleanup failed"

        # az storage account delete \
        #   --name $STORAGE_ACCOUNT \
        #   --resource-group ${{ inputs.resource-group }} \
        #   --yes || echo "Storage account cleanup failed"
