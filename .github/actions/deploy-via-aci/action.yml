name: 'Deploy via ACI'
description: 'Deploy zip artifact to App Service via ACI'

inputs:
  github-run-id:
    description: 'GitHub Run ID for uniqueness'
    required: true
  github-token:
    description: 'GitHub token for accessing artifacts'
    required: true
  artifact-path:
    description: 'Path to the downloaded artifact to be deployed'
    required: true
  environment:
    description: 'Target environment (dev, test, stage, prod)'
    required: true
  resource-group:
    description: 'Resource group for the deployment'
    required: true
  region:
    description: 'Region for creating deployment resources'
    required: true
  identity-resource-id:
    description: 'Resource ID (mamanged identity id) for ACI'
    required: true
  aci-vnet: 
    description: 'VNET for ACI deployment'
    required: true
  aci-subnet:
    description: 'Subnet for ACI deployment'
    required: true
  app-service-name:
    description: 'Name of the deployment target Azure App Service'
    required: true
  client-id:
    description: 'caller client-id'
    required: true
  tenant-id:
    description: 'caller tenant-id'
    required: true
  subscription-id:
    description: 'caller subscription-id'
    required: true

runs:
  using: "composite"
  steps:
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}

    - name: Create temporary storage account & container
      shell: bash
      run: |
        STORAGE_ACCOUNT="stgtmp${{ inputs.github-run-id }}$(openssl rand -hex 3 | tr -dc 'a-z0-9')"
        STORAGE_ACCOUNT=$(echo "$STORAGE_ACCOUNT" | tr '[:upper:]' '[:lower:]' | cut -c 1-24)  # Storage account names must be 3-24 chars
        echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

        az storage account create \
          --name $STORAGE_ACCOUNT \
          --resource-group ${{ inputs.resource-group }} \
          --location ${{ inputs.region }} \
          --sku Standard_LRS \
          --kind StorageV2

        CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group ${{ inputs.resource-group }} --query connectionString -o tsv)

        az storage container create --name deploy --connection-string "$CONNECTION_STRING"

        az storage blob upload \
          --connection-string "$CONNECTION_STRING" \
          --container-name deploy \
          --file ./artifact/artifact.zip \
          --name artifact.zip

        SAS_TOKEN=$(az storage blob generate-sas \
          --account-name $STORAGE_ACCOUNT \
          --container-name deploy \
          --name artifact.zip \
          --permissions r \
          --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ') \
          --output tsv)

        echo "ZIP_URL=https://${STORAGE_ACCOUNT}.blob.core.windows.net/deploy/artifact.zip?${SAS_TOKEN}" >> $GITHUB_ENV

    - name: Deploy via ACI
      shell: bash
      env:
        ACI_MEMORY: 2
        ACI_CPU: 1
        CONTAINER_IMAGE: 'mcr.microsoft.com/azure-cli:latest'
      run: |
        set -uo pipefail

        ACI_NAME=aci-deploy-${{ inputs.github-run-id }}
        LOG_FILE=deployment.log
        CLEANUP_DONE=false

        # Enhanced cleanup function
        cleanup() {
          if [ "$CLEANUP_DONE" = false ]; then
            echo "Performing cleanup..."
            
            # Kill log streaming if still running
            if [ -n "${LOGS_PID-}" ] && ps -p "$LOGS_PID" > /dev/null 2>&1; then
              kill "$LOGS_PID" 2>/dev/null || true
            fi
        
            # Delete ACI container if exists
            if az container show --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" --query "id" -o tsv >/dev/null 2>&1; then
              echo "Deleting ACI container..."
              az container delete \
                --resource-group "${{ inputs.resource-group }}" \
                --name "$ACI_NAME" \
                --yes || echo "Warning: ACI deletion failed (may already be deleted)"
            fi

            # Delete storage account if exists
            if az storage account show --name "$STORAGE_ACCOUNT" --resource-group "${{ inputs.resource-group }}" --query "id" -o tsv >/dev/null 2>&1; then
              echo "Deleting storage account..."
              az storage account delete \
                --name "$STORAGE_ACCOUNT" \
                --resource-group "${{ inputs.resource-group }}" \
                --yes || echo "Warning: Storage account deletion failed (may already be deleted)"
            fi

            CLEANUP_DONE=true
          fi
        }

        # Ensure cleanup runs on exit
        trap cleanup EXIT

        echo "Creating container instance..."
        az container create \
          --resource-group ${{ inputs.resource-group }} \
          --name $ACI_NAME \
          --os-type Linux \
          --image $CONTAINER_IMAGE \
          --vnet ${{ inputs.aci-vnet }} \
          --subnet ${{ inputs.aci-subnet }} \
          --cpu $ACI_CPU \
          --memory $ACI_MEMORY \
          --location  ${{ inputs.region }} \
          --restart-policy Never \
          --assign-identity ${{ inputs.identity-resource-id }} \
          --command-line "/bin/bash -c 'set -x && az login --identity && curl -sSL \"$ZIP_URL\" -o \"artifact.zip\" && if az webapp deploy --resource-group \"${{ inputs.resource-group }}\" --name \"${{ inputs.app-service-name }}\" --src-path \"artifact.zip\" --type zip --restart true; then echo \"DEPLOYMENT_COMPLETED\" && exit 0; else echo \"DEPLOYMENT_FAILED\" && exit 1; fi'"

        TIMEOUT_LIMIT=600  # Increase timeout from default to 10 minutes
        START_TIME=$(date +%s)
        DEPLOYMENT_SUCCESS=false

        echo "Monitoring deployment progress..."
        while true; do
            # Pull latest logs (on-demand)
            az container logs --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" > "$LOG_FILE" || echo "Warning: could not fetch logs"

            # Check logs for success/failure markers
            if grep -q "DEPLOYMENT_COMPLETED" "$LOG_FILE" || grep -q "Deployment successful" "$LOG_FILE"; then
                echo "Deployment success detected in logs"
                DEPLOYMENT_SUCCESS=true
                break
            fi
    
            if grep -q "DEPLOYMENT_FAILED" "$LOG_FILE"; then
                echo "Deployment failure detected in logs"
                echo "=== Last 100 lines of logs ==="
                tail -n 100 "$LOG_FILE"
                cleanup
                exit 1
            fi

            # Check container status as secondary check
            STATUS=$(az container show --resource-group "${{ inputs.resource-group }}" --name "$ACI_NAME" --query "instanceView.state" -o tsv 2>/dev/null || echo "NotFound")
            echo "Container Status: $STATUS (Elapsed: $(($(date +%s) - START_TIME))s)"  
              
            if [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
                echo "Container failed or stopped unexpectedly"
                echo "=== Last 100 lines of logs ==="
                tail -n 100 "$LOG_FILE"
                cleanup 
                exit 1
            fi

            # Timeout check
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            if [[ $ELAPSED -ge $TIMEOUT_LIMIT ]]; then
                echo "Timeout reached - last 100 lines of logs:"
                tail -n 100 deployment.log
                cleanup
                exit 1
            fi

            sleep 10
        done
