name: 'Deploy via ACI'
description: 'Deploy zip artifact to App Service via ACI'
inputs:
  # app-service-name:
  #   description: 'Name of the deployment target Azure App Service'
  #   required: true
  github-run-id:
    description: 'GitHub Run ID for uniqueness'
    required: true
  environment:
    description: 'Target environment (dev, test, stage, prod)'
    required: true

runs:
  using: "composite"
  steps:
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create temporary storage account & container
      shell: bash
      run: |
        # STORAGE_ACCOUNT="stgtmp${{ inputs.github-run-id }}$RANDOM"
        # STORAGE_ACCOUNT=$(echo $STORAGE_ACCOUNT | tr '[:upper:]' '[:lower:]')
        # echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV
        # Generate a unique storage account name (lowercase, alphanumeric)
        STORAGE_ACCOUNT="stgtmp${{ inputs.github-run-id }}$(openssl rand -hex 3 | tr -dc 'a-z0-9')"
        STORAGE_ACCOUNT=$(echo "$STORAGE_ACCOUNT" | tr '[:upper:]' '[:lower:]' | cut -c 1-24)  # Storage account names must be 3-24 chars
        echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

        az storage account create \
          --name $STORAGE_ACCOUNT \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location $REGION \
          --sku Standard_LRS \
          --kind StorageV2

        CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group ${{ env.RESOURCE_GROUP }} --query connectionString -o tsv)

        az storage container create --name deploy --connection-string "$CONNECTION_STRING"

        az storage blob upload \
          --connection-string "$CONNECTION_STRING" \
          --container-name deploy \
          --file ./artifact/${ZIP_NAME} \
          --name ${ZIP_NAME}

        SAS_TOKEN=$(az storage blob generate-sas \
          --account-name $STORAGE_ACCOUNT \
          --container-name deploy \
          --name ${ZIP_NAME} \
          --permissions r \
          --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ') \
          --output tsv)

        echo "ZIP_URL=https://${STORAGE_ACCOUNT}.blob.core.windows.net/deploy/${ZIP_NAME}?${SAS_TOKEN}" >> $GITHUB_ENV

    - name: Deploy via ACI
      shell: bash
      run: |
        ACI_NAME=aci-${{ inputs.environment }}-${{ inputs.github-run-id }}

        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name $ACI_NAME \
          --os-type Linux \
          --image $CONTAINER_IMAGE \
          --vnet $ACI_VNET \
          --subnet ${{ env.ACI_SUBNET }} \
          --cpu $ACI_CPU \
          --memory $ACI_MEMORY \
          --location $REGION \
          --restart-policy Never \
          --assign-identity ${{ env.IDENTITY_RESOURCE_ID }} \
          --command-line "/bin/bash -c 'set -x && az login --identity && curl -sSL \"$ZIP_URL\" -o \"$ZIP_NAME\" && az webapp deploy --resource-group \"${{ env.RESOURCE_GROUP }}\" --name \"${{ inputs.app-service-name }}\" --src-path \"$ZIP_NAME\" --type zip --restart true'"

        for i in {1..30}; do
          STATUS=$(az container show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $ACI_NAME \
            --query "instanceView.state" \
            --output tsv)

          echo "Status: $STATUS"

          if [[ "$STATUS" == "Succeeded" ]]; then
            echo "Deployment completed successfully"
            break
          elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
            echo "Deployment failed. Logs:"
            az container logs --resource-group "${{ env.RESOURCE_GROUP }}" --name "$ACI_NAME"
            exit 1
          fi

          sleep 10
        done

        echo "Final container logs:"
        az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name $ACI_NAME

        if [[ "$STATUS" != "Succeeded" ]]; then
          echo "Timeout reached - deployment did not complete"
          exit 1
        fi

        az container delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name $ACI_NAME \
          --yes || echo "ACI cleanup failed"

        az storage account delete \
          --name $STORAGE_ACCOUNT \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --yes || echo "Storage account cleanup failed"
